plugins {
    id "java"
    id "maven-publish"
    id "signing"
    id "checkstyle"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

archivesBaseName = project.maven_name
group = project.maven_group
version = project.maven_version

repositories {
    mavenCentral()
}

dependencies {
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"

    testImplementation platform("org.junit:junit-bom:5.9.0")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.ow2.asm:asm:9.5"
}

java {
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    failOnError = false
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    maxParallelForks Runtime.runtime.availableProcessors()
}

publishing {
    repositories {
        maven {
            name = "reposilite"
            def releasesUrl = "https://maven.lenni0451.net/releases"
            def snapshotsUrl = "https://maven.lenni0451.net/snapshots"
            url = project.maven_version.endsWith("SNAPSHOT") ? snapshotsUrl : releasesUrl

            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
        maven {
            name = "ossrh"
            def releasesUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = project.maven_version.endsWith("SNAPSHOT") ? snapshotsUrl : releasesUrl

            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifactId = project.maven_name
            groupId = project.maven_group
            version = project.maven_version

            from components.java

            pom {
                name = rootProject.name
                description = "A reflection library with some useful methods to bypass reflection restrictions in Java"
                url = "https://github.com/Lenni0451/Reflect"
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/Lenni0451/Reflect/blob/main/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "Lenni0451"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/Lenni0451/Reflect.git"
                    developerConnection = "scm:git:ssh://github.com/Lenni0451/Reflect.git"
                    url = "github.com/Lenni0451/Reflect"
                }
            }
        }
    }
}

checkstyle {
    toolVersion = "9.3" //Latest version for Java 8
    configFile = rootProject.file("config/checkstyle.xml")
}

signing {
    sign configurations.archives
    sign publishing.publications.maven
}

project.tasks.withType(PublishToMavenRepository).forEach {
    it.dependsOn(project.tasks.withType(Sign))
}
build.dependsOn(test)
build.dependsOn(check)
